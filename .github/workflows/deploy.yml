name: Infra Build & Deploy Weather App

on:
  push:
    branches:
      - main

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          
      - name: AZ login
        uses: azure/login@v2
        with:
           #creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","tenantId":"${{ secrets.ARM_TENANT_ID }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}"}'
           creds: ${{ secrets.AZURE_CREDENTIALS }}
      

      - name: Initialize Terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: terraform init

      - name: Run Terraform Plan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          SP_OBJECT_ID: ${{ secrets.SP_OBJECT_ID }}
        run: terraform plan -var="sp_object_id=$SP_OBJECT_ID"

  apply:
    name: Terraform Apply (Manual Approval)
    runs-on: ubuntu-latest
    needs: plan
    environment: terraform-apply  # Triggers manual approval

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      # - name: AZ login
      #   uses: azure/login@v2
      #   with:
      #      #creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","tenantId":"${{ secrets.ARM_TENANT_ID }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}"}'
      #      creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Set Azure Credentials
        run: |
          echo "Setting up Azure credentials for Terraform..."
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          
      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Plan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          SP_OBJECT_ID: ${{ secrets.SP_OBJECT_ID }}
        run: 
          terraform plan -var="sp_object_id=$SP_OBJECT_ID"
      
      - name: Apply Terraform Changes
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          SP_OBJECT_ID: ${{ secrets.SP_OBJECT_ID }}
        run: 
          terraform apply --auto-approve -var="sp_object_id=$SP_OBJECT_ID"

      - name: Save VM Public IP as Artifact
        run: |
           terraform output -raw public_ip
           terraform output -raw public_ip | grep -i Terraform| egrep -v command| awk -F'::' '{print $1}' > vm_ip.txt
           cat vm_ip.txt
        shell: bash

      - name: Upload VM IP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vm-ip
          path: vm_ip.txt

  deploy:
    name: Deploy Weather App
    runs-on: ubuntu-latest
    needs: apply

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download VM IP from Artifact
        uses: actions/download-artifact@v4
        with:
          name: vm-ip

      - name: Read VM IP
        run: |
          pwd
          ls
          cat vm_ip.txt
          VM_IP=$(cat vm_ip.txt) >> $GITHUB_ENV

      - name: Retrieve SSH Key from Azure Key Vault
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Deploy Python App to Azure VM
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem azureuser@$VM_IP << 'EOF'
          sudo apt update && sudo apt install -y python3 python3-pip
          pip3 install flask requests gunicorn
          nohup gunicorn -w 4 -b 0.0.0.0:80 app:app &
          EOF
